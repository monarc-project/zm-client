<?php declare(strict_types=1);
/**
 * @link      https://github.com/monarc-project for the canonical source repository
 * @copyright Copyright (c) 2016-2022 SMILE GIE Securitymadein.lu - Licensed under GNU Affero GPL v3
 * @license   MONARC is licensed under GNU Affero General Public License version 3
 */

namespace Monarc\FrontOffice\Controller;

use Monarc\Core\Controller\Handler\AbstractRestfulControllerRequestHandler;
use Monarc\Core\Controller\Handler\ControllerRequestResponseHandlerTrait;
use Monarc\Core\Exception\Exception;
use Monarc\Core\Model\Entity\AbstractEntity;
use Laminas\View\Model\JsonModel;
use Monarc\Core\Validator\InputValidator\ObjectComposition\MovePositionDataInputValidator;
use Monarc\FrontOffice\Service\AnrObjectObjectService;

class ApiAnrObjectsObjectsController extends AbstractRestfulControllerRequestHandler
{
    use ControllerRequestResponseHandlerTrait;

    private AnrObjectObjectService $anrObjectObjectService;

    private MovePositionDataInputValidator $movePositionDataInputValidator;

    public function __construct(
        AnrObjectObjectService $anrObjectObjectService,
        MovePositionDataInputValidator $movePositionDataInputValidator
    ) {
        $this->anrObjectObjectService = $anrObjectObjectService;
        $this->movePositionDataInputValidator = $movePositionDataInputValidator;
    }

    public function update($id, $data)
    {
        $this->validatePostParams($this->movePositionDataInputValidator, $data);

        $this->anrObjectObjectService->shiftPositionInComposition(
            $id,
            $this->movePositionDataInputValidator->getValidData()
        );

        return $this->getSuccessfulJsonResponse();
    }

    /**
     * @inheritdoc
     */
    public function create($data)
    {
        $anrId = (int)$this->params()->fromRoute('anrid');
        if (empty($anrId)) {
            throw new Exception('Anr id missing', 412);
        }
        $data['anr'] = $anrId;
        $data['child'] = ['anr' => $anrId, 'uuid' => $data['child']];
        $data['parent'] = ['anr' => $anrId, 'uuid' => $data['parent']];

        $id = $this->getService()->create($data, true, AbstractEntity::FRONT_OFFICE);

        return new JsonModel([
            'status' => 'ok',
            'id' => $id,
        ]);
    }

    // TODO: only the 3 methods are used in the controller. (delete was added to get rid of the abstract controller)
    public function delete($id)
    {
        return parent::delete($id); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function get($id)
    {
        return $this->methodNotAllowed();
    }

    /**
     * @inheritdoc
     */
    public function getList()
    {
        return $this->methodNotAllowed();
    }

    /**
     * @inheritdoc
     */
    public function patch($id, $data)
    {
        return $this->methodNotAllowed();
    }
}
