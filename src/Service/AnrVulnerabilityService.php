<?php declare(strict_types=1);
/**
 * @link      https://github.com/monarc-project for the canonical source repository
 * @copyright Copyright (c) 2016-2024 Luxembourg House of Cybersecurity LHC.lu - Licensed under GNU Affero GPL v3
 * @license   MONARC is licensed under GNU Affero General Public License version 3
 */

namespace Monarc\FrontOffice\Service;

use Monarc\Core\InputFormatter\FormattedInputParams;
use Monarc\Core\Entity\UserSuperClass;
use Monarc\Core\Entity\VulnerabilitySuperClass;
use Monarc\Core\Service\ConnectedUserService;
use Monarc\FrontOffice\Entity\Anr;
use Monarc\FrontOffice\Entity\Vulnerability;
use Monarc\FrontOffice\Table\VulnerabilityTable;

class AnrVulnerabilityService
{
    private UserSuperClass $connectedUser;

    public function __construct(
        private VulnerabilityTable $vulnerabilityTable,
        ConnectedUserService $connectedUserService
    ) {
        $this->connectedUser = $connectedUserService->getConnectedUser();
    }

    public function getList(FormattedInputParams $params): array
    {
        $result = [];
        /** @var Vulnerability $vulnerability */
        foreach ($this->vulnerabilityTable->findByParams($params) as $vulnerability) {
            $result[] = $this->prepareVulnerabilityDataResult($vulnerability);
        }

        return $result;
    }

    public function getCount(FormattedInputParams $params): int
    {
        return $this->vulnerabilityTable->countByParams($params);
    }

    public function getVulnerabilityData(Anr $anr, string $uuid): array
    {
        /** @var Vulnerability $vulnerability */
        $vulnerability = $this->vulnerabilityTable->findByUuidAndAnr($uuid, $anr);

        return $this->prepareVulnerabilityDataResult($vulnerability);
    }

    public function create(Anr $anr, array $data, bool $saveInDb = true): Vulnerability
    {
        $vulnerability = (new Vulnerability())
            ->setAnr($anr)
            ->setCode($data['code'])
            ->setLabels($data)
            ->setDescriptions($data)
            ->setCreator($this->connectedUser->getEmail());
        if (isset($data['uuid'])) {
            $vulnerability->setUuid($data['uuid']);
        }
        if (isset($data['status'])) {
            $vulnerability->setStatus((int)$data['status']);
        }
        if (isset($data['mode'])) {
            $vulnerability->setMode((int)$data['mode']);
        }

        $this->vulnerabilityTable->save($vulnerability, $saveInDb);

        return $vulnerability;
    }

    public function createList(Anr $anr, array $data): array
    {
        $createdUuids = [];
        foreach ($data as $row) {
            $createdUuids[] = $this->create($anr, $row, false)->getUuid();
        }
        $this->vulnerabilityTable->flush();

        return $createdUuids;
    }

    public function update(Anr $anr, string $uuid, array $data): Vulnerability
    {
        /** @var Vulnerability $vulnerability */
        $vulnerability = $this->vulnerabilityTable->findByUuidAndAnr($uuid, $anr);

        $vulnerability->setCode($data['code'])
            ->setLabels($data)
            ->setDescriptions($data)
            ->setUpdater($this->connectedUser->getEmail());

        $this->vulnerabilityTable->save($vulnerability);

        return $vulnerability;
    }

    public function patch(Anr $anr, string $uuid, array $data): Vulnerability
    {
        /** @var Vulnerability $vulnerability */
        $vulnerability = $this->vulnerabilityTable->findByUuidAndAnr($uuid, $anr);

        if (isset($data['status'])) {
            $vulnerability->setStatus((int)$data['status'])->setUpdater($this->connectedUser->getEmail());

            $this->vulnerabilityTable->save($vulnerability);
        }

        return $vulnerability;
    }

    public function delete(Anr $anr, string $uuid): void
    {
        /** @var Vulnerability $vulnerability */
        $vulnerability = $this->vulnerabilityTable->findByUuidAndAnr($uuid, $anr);

        $this->vulnerabilityTable->remove($vulnerability);
    }

    public function deleteList(Anr $anr, array $data): void
    {
        /** @var Vulnerability[] $vulnerabilities */
        $vulnerabilities = $this->vulnerabilityTable->findByUuidsAndAnr($data, $anr);

        $this->vulnerabilityTable->removeList($vulnerabilities);
    }

    protected function prepareVulnerabilityDataResult(VulnerabilitySuperClass $vulnerability): array
    {
        return array_merge($vulnerability->getLabels(), $vulnerability->getDescriptions(), [
            'uuid' => $vulnerability->getUuid(),
            'anr' => [
                'id' => $vulnerability->getAnr()->getId(),
            ],
            'code' => $vulnerability->getCode(),
            'status' => $vulnerability->getStatus(),
            'mode' => $vulnerability->getMode(),
        ]);
    }
}
