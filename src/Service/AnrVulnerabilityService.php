<?php declare(strict_types=1);
/**
 * @link      https://github.com/monarc-project for the canonical source repository
 * @copyright Copyright (c) 2016-2022 SMILE GIE Securitymadein.lu - Licensed under GNU Affero GPL v3
 * @license   MONARC is licensed under GNU Affero General Public License version 3
 */

namespace Monarc\FrontOffice\Service;

use Monarc\Core\Service\AbstractService;

class AnrVulnerabilityService extends AbstractService
{
    protected $dependencies = ['anr'];
    protected $anrTable;
    protected $userAnrTable;
    protected $filterColumns = [
        'label1',
        'label2',
        'label3',
        'label4',
        'description1',
        'description2',
        'description3',
        'description4',
        'code',
        'status',
    ];

    public function getList($page = 1, $limit = 25, $order = null, $filter = null, $filterAnd = null)
    {
        // Do a soft limit, as we need to manually parse the codes to order them.
        $data = $this->get('table')->fetchAllFiltered(
            array_keys($this->get('entity')->getJsonArray()),
            1,
            0,
            $this->parseFrontendOrder($order),
            $this->parseFrontendFilter($filter, $this->filterColumns),
            $filterAnd
        );

        if ($order === "code" || $order === "-code") {
            $desc = $order === "-code";

            // Codes might be in xx.xx.xx format which need a numerical sorting instead of an alphabetical one
            $re = '/^[0-9]+$/m';
            usort($data, static function ($a, $b) use ($re, $desc) {
                $a['code'] = trim($a['code']);
                $b['code'] = trim($b['code']);
                $a_match = (preg_match($re, $a['code']) > 0);
                $b_match = (preg_match($re, $b['code']) > 0);

                if ($a_match && $b_match) {
                    return $desc ? (int)$b['code'] - (int)$a['code'] : (int)$a['code'] - (int)$b['code'];
                }
                if ($a_match && !$b_match) {
                    return $desc ? 1 : -1;
                }
                if (!$a_match && $b_match) {
                    return $desc ? -1 : 1;
                }

                return 0;
            });
        }

        if (!empty($limit) && $limit > 0) {
            return \array_slice($data, ($page - 1) * $limit, $limit, false);
        }

        return $data;
    }
}
