<?php declare(strict_types=1);
/**
 * @link      https://github.com/monarc-project for the canonical source repository
 * @copyright Copyright (c) 2016-2022 SMILE GIE Securitymadein.lu - Licensed under GNU Affero GPL v3
 * @license   MONARC is licensed under GNU Affero General Public License version 3
 */

namespace Monarc\FrontOffice\Table;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityNotFoundException;
use Doctrine\ORM\NonUniqueResultException;
use Monarc\Core\Model\Entity\AnrSuperClass;
use Monarc\Core\Model\Entity\VulnerabilitySuperClass;
use Monarc\Core\Table\AbstractTable;
use Monarc\FrontOffice\Model\Entity\Anr;
use Monarc\FrontOffice\Model\Entity\Vulnerability;

class VulnerabilityTable extends AbstractTable
{
    public function __construct(EntityManager $entityManager, string $entityName = Vulnerability::class)
    {
        parent::__construct($entityManager, $entityName);
    }

    /**
     * @param AnrSuperClass $anr
     * @param string[] $uuids
     *
     * @return VulnerabilitySuperClass[]
     */
    public function findByAnrAndUuids(AnrSuperClass $anr, array $uuids): array
    {
        $queryBuilder = $this->getRepository()->createQueryBuilder('v');

        return $queryBuilder
            ->where('v.anr = :anr')
            ->andWhere($queryBuilder->expr()->in('v.uuid', $uuids))
            ->setParameter(':anr', $anr)
            ->getQuery()
            ->getResult();
    }

    /**
     * @return VulnerabilitySuperClass[]
     */
    public function findByAnr(AnrSuperClass $anr): array
    {
        return $this->getRepository()
            ->createQueryBuilder('v')
            ->where('v.anr = :anr')
            ->setParameter(':anr', $anr)
            ->getQuery()
            ->getResult();
    }

    public function findUuidsAndCodesByAnr(Anr $anr): array
    {
        return $this->getRepository()->createQueryBuilder('v')
            ->select('v.uuid, v.code')
            ->where('v.anr = :anr')
            ->setParameter('anr', $anr)
            ->getQuery()
            ->getScalarResult();
    }

    /**
     * @param Anr $anr
     * @param string[] $uuids
     * @param string $indexField The result array will be indexed by the filed.
     *
     * @return Vulnerability[]
     */
    public function findByAnrAndUuidsIndexedByField(Anr $anr, array $uuids, string $indexField = 'uuid'): array
    {
        $queryBuilder = $this->getRepository()->createQueryBuilder('v', 'v.' . $indexField);

        return $queryBuilder->where('v.anr = :anr')
            ->andWhere($queryBuilder->expr()->in('v.uuid', $uuids))
            ->setParameter(':anr', $anr)
            ->getQuery()
            ->getResult();
    }
}
