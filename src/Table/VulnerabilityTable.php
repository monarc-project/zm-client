<?php declare(strict_types=1);
/**
 * @link      https://github.com/monarc-project for the canonical source repository
 * @copyright Copyright (c) 2016-2022 SMILE GIE Securitymadein.lu - Licensed under GNU Affero GPL v3
 * @license   MONARC is licensed under GNU Affero General Public License version 3
 */

namespace Monarc\FrontOffice\Table;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityNotFoundException;
use Monarc\Core\Model\Entity\AnrSuperClass;
use Monarc\Core\Model\Entity\VulnerabilitySuperClass;
use Monarc\Core\Table\VulnerabilityTable as CoreVulnerabilityTable;
use Monarc\FrontOffice\Model\Entity\Anr;
use Monarc\FrontOffice\Model\Entity\Vulnerability;

class VulnerabilityTable extends CoreVulnerabilityTable
{
    public function __construct(EntityManager $entityManager, $entityName = Vulnerability::class)
    {
        parent::__construct($entityManager, $entityName);
    }

    /**
     * @throws EntityNotFoundException
     */
    public function findByAnrAndUuid(AnrSuperClass $anr, string $uuid): VulnerabilitySuperClass
    {
        $vulnerability = $this->getRepository()
            ->createQueryBuilder('v')
            ->where('v.anr = :anr')
            ->andWhere('v.uuid = :uuid')
            ->setParameter(':anr', $anr)
            ->setParameter(':uuid', $uuid)
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();

        if ($vulnerability === null) {
            throw new EntityNotFoundException(
                sprintf('Vulnerability with anr ID "%d" and uuid "%s" has not been found.', $anr->getId(), $uuid)
            );
        }

        return $vulnerability;
    }

    public function findUuidsAndCodesByAnr(Anr $anr): array
    {
        return $this->getRepository()->createQueryBuilder('v')
            ->select('v.uuid, v.code')
            ->where('v.anr = :anr')
            ->setParameter('anr', $anr)
            ->getQuery()
            ->getScalarResult();
    }

    /**
     * @param Anr $anr
     * @param string[] $uuids
     * @param string $indexField The result array will be indexed by the filed.
     *
     * @return array
     */
    public function findByAnrAndUuidsIndexedByField(Anr $anr, array $uuids, string $indexField = 'uuid'): array
    {
        $queryBuilder = $this->getRepository()->createQueryBuilder('v', 'v.' . $indexField);

        return $queryBuilder->where('v.anr = :anr')
            ->andWhere($queryBuilder->expr()->in('v.uuid', $uuids))
            ->setParameter(':anr', $anr)
            ->getQuery()
            ->getResult();
    }

    // TODO: replace to its usage to save and drop
    public function saveEntity(VulnerabilitySuperClass $vulnerability, bool $flushAll = true): void
    {
        $this->entityManager->persist($vulnerability);
        if ($flushAll) {
            $this->entityManager->flush();
        }
    }
}
