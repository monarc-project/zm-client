<?php
/**
 * @link      https://github.com/CASES-LU for the canonical source repository
 * @copyright Copyright (c) Cases is a registered trademark of SECURITYMADEIN.LU
 * @license   MyCases is licensed under the GNU Affero GPL v3 - See license.txt for more information
 */

namespace MonarcFO\Service;

/**
 * Anr Vulnerability Service
 *
 * Class AnrVulnerabilityService
 * @package MonarcFO\Service
 */
class AnrVulnerabilityService extends \MonarcCore\Service\AbstractService
{
    protected $dependencies = ['anr'];
    protected $anrTable;
    protected $userAnrTable;
    protected $filterColumns = [
        'label1', 'label2', 'label3', 'label4',
        'description1', 'description2', 'description3', 'description4',
        'code', 'status',
    ];

    /**
     * Get List
     *
     * @param int $page
     * @param int $limit
     * @param null $order
     * @param null $filter
     * @return mixed
     */
    public function getList($page = 1, $limit = 25, $order = null, $filter = null, $filterAnd = null)
    {
        // Do a soft limit, as we need to manually parse the codes to order them.
        $data = $this->get('table')->fetchAllFiltered(
            array_keys($this->get('entity')->getJsonArray()),
            $page,
            $limit,
            $this->parseFrontendOrder($order),
            $this->parseFrontendFilter($filter, $this->filterColumns),
            $filterAnd
        );

        if ($order == "code" || $order == "-code") {
            $desc = ($order == "-code");

            // Codes might be in xx.xx.xx format which need a numerical sorting instead of an alphabetical one
            $re = '/^[0-9]+$/m';
            usort($data, function ($a, $b) use ($re, $desc) {
                $a_match = (preg_match($re, $a['code']) > 0);
                $b_match = (preg_match($re, $b['code']) > 0);

                if ($a_match && $b_match) {
                    return $desc ? intval($b['code']) - intval($a['code']) : intval($a['code']) - intval($b['code']);
                } else if ($a_match && !$b_match) {
                    return $desc ? 1 : -1;
                } else if (!$a_match && $b_match) {
                    return $desc ? -1 : 1;
                } else {
                    return $desc ? intval($b_match) - intval($a_match) : strcmp($a_match, $b_match);
                }
            });
        }

        return $data;
    }
}
